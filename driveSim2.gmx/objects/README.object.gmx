<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///README
/*
link to better formatted README: do later

game maker:
objects are basically classes kinda
game maker is weird, it's kinda oop kinda not
there's objects and child objects, which are like classes and subclasses, but there are no functions for classes or parameters
for functions scripts are used
for parameters weird shit is used
create event happens when an instance of the object is created
step event happens every tick of the game, currently thats every 60th of a second
var is local variable
nothing is object variable
globalvar is global variable
prefix all object names with obj
sprite spr
script scr
room rm
if you need to create something that's not in this list please tell me
README is an exception
to add stuff to rooms drag them in from the right
to delete stuff left click then ctrl-x
when printing stuff use string(varName) to change the var to a string and then concatenate

abbreviations:
d after a number = degrees
d in front of a var = difference in
i in front of a var = initial
cc = counterclockwise
cw = clockwise
km = keyboard + mouse
irl = the actual irl controller
pos = position
vel = velocity
acc = acceleration
p before a var = previous
thr = thrust
stw = steering wheel
enc = encoder counts

stuff to keep in mind:
DEGREES!!
use d in front of all trig stuff to make them degrees ex: dsin
make all time sensitive stuff have rmSpd as a divisor
dx dy stuff read in general stuff
when making a room put the objects in creation order from top left going right then down

general stuff:
origin is top left corner, +x goes right, +y goes down
however, to keep stuff simple, think of +y as going up and instead, do - operators to everything related to y
example: x += dx, however, y -= dy
everything is in degrees, with right being 0d and degrees increasing cc
objBlock should be the parent of everything that the robot cannot pass through, including another robot

design:
overall:
each robot is represented by a robot obj
each robot object has its own robot controller obj
km and irl control schemes can be toggled in the create event of robot controller
driveSim:
the driveSim function's goal is to simulate the actual robot
the driveSim function takes in some inputs and gives us outputs of dHPos, dVPos, and dDir, which is passed to each robot
dHPos and dVPos are perpendicular and parallel to where the camera points, respectively
dHPos and dVPos are first translated to a new position, then dir is updated
the inputs are how much thrust is pushed, how much steering wheel is turned, dEnc, and dir
the driveSim move function is in the controller object
*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
