<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>objGeneral</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///vars
///globalvars
///general
globalvar mode;
mode = "online";
globalvar masterTime, gameTime;
masterTime = -1;
gameTime = (1 * 60 + 45) * room_speed;

///field
globalvar px2cm;
px2cm = 1;
globalvar pixelToEncoder;
globalvar blueScore;
blueScore = 0;
globalvar redScore;
redScore = 0;
globalvar blueSwitchCubes;
blueSwitchCubes = 0;
globalvar redSwitchCubes;
redSwitchCubes = 0;
baseSwitchScore = 1;
globalvar redSwitchScore;
redSwitchScore = baseSwitchScore;
globalvar blueSwitchScore;
blueSwitchScore = baseSwitchScore;
globalvar scaleScore;
scaleScore = 1;
globalvar baseScaleScore;
baseScaleScore = scaleScore;
globalvar collisionArray;
globalvar chunkSize;
chunkSize = 20;
globalvar robotSize;
robotSize = 32;
globalvar thisManipulatedCubeIds;
thisManipulatedCubeIds = ds_list_create();
globalvar redSwitchTop, blueSwitchTop, scaleTop;
redSwitchTop = -1;
blueSwitchTop = -1;
scaleTop = -1;
globalvar powerup;
powerup = "none";
timeCur = 0;
globalvar blueExchangeCube;
blueExchangeCube = false;
globalvar redExchangeCube;
redExchangeCube = false;
globalvar redPowerUp, lastRedPowerUp, bluePowerUp, lastBluePowerUp, redLockedOut, blueLockedOut;
globalvar powerupEffects;
globalvar boostImageSpeed;
boostImageSpeed = 1 / 3;
globalvar currInQueueId, currInQueueSide, currInQueueType;
currInQueueId = noone;
currInQueueSide = "none";
currInQueueType = 255;

for (var i = 0; i &lt; 3; i++) {
    redPowerUp[i] = 0;
    lastRedPowerUp[i] = 0;
    bluePowerUp[i] = 0;
    lastBluePowerUp[i] = 0;
    powerupEffects[i] = instance_create(0, 0, objData);
    powerupEffects[i].type = 255;
    powerupEffects[i].side = "none";
    redLockedOut[i] = false;
    blueLockedOut[i] = false;
}

globalvar redAddedCube, blueAddedCube;
redAddedCube = instance_create(0, 0, objData);
blueAddedCube = instance_create(0, 0, objData);
redAddedCube.type = 255;
redAddedCube.num = -1;
blueAddedCube.type = 255;
blueAddedCube.num = -1;
globalvar redExchangeCubeId, blueExchangeCubeId;
redExchangeCubeId = noone;
blueExchangeCubeId = noone;
globalvar forceII, boostIIStart, boostIIEnd, noneII;
forceII = 3;
boostIIStart = 0; //inclusive
boostIIEnd = 1; //inclusive
noneII = 2;
globalvar redLevitated, blueLevitated;
redLevitated = false;
blueLevitated = false;

for (var i = 0; i &lt; 3; i++) {
    pointSide[i] = "none";
    pointValue[i] = 1;
}

///robot
//km
globalvar topSpd; //this spd is multiplied off of for thrust controls
topSpd = (600 / room_speed);
globalvar currTopSpd;
currTopSpd = topSpd;
globalvar baseTurnSpd; //the amount of degrees to turn per degree of steering wheel turn
baseTurnSpd = 2.5 / room_speed;
globalvar angleGrace;
angleGrace = 10;
//other
globalvar iXPos;
iXPos = 150;
globalvar iYPos;
iYPos = 150;
globalvar iDir;
iDir = 0;
globalvar test;
test=5;
globalvar time;
globalvar laserTimer;
laserTimer = 100;
time = 0;
globalvar controlling;
controlling=true;
globalvar numRobots;
numRobots = 6;
globalvar robotIds;
globalvar cubeIds;
cubeIds = ds_list_create();

///useless stuff
//stuff needed to make robot be able to take parameters cuz game maker shit
globalvar robotTempCid;
globalvar robotTempXPos;
globalvar robotTempYPos;
globalvar robotTempDir;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///creation stuff
///configurable
for (var i = 0; i &lt; numRobots; i++) {
    controlSchemes[i] = objMaster.controlSchemes[i];
}

///general
globalvar portalTimer;
portalTimer=0;
offset=377;
var robotOffset = 150;
globalvar gameInPlay;
gameInPlay = false;

///power up field
//walls

//score
var numberWidth = scrGetWidth(objRedNumber);
var numberHeight = scrGetHeight(objRedNumber);
var numberInBetweenDist = 10;
var xOffset = 100;
var yOffset = 50;
var numNumbers = 3;
globalvar bluePortalOne;
globalvar bluePortalTwo;
globalvar redPortalOne;
globalvar redPortalTwo;

for(var j=0;j&lt;7;j++){
    bluePortalOne[j]=instance_create(-50,-50,objPowerCube);
    bluePortalOne[j].side = "b";
    ds_list_add(cubeIds, bluePortalOne[j]);
}
for(var j=0;j&lt;7;j++){
    bluePortalTwo[j]=instance_create(-50,-50,objPowerCube);
    bluePortalTwo[j].side = "b";
    ds_list_add(cubeIds, bluePortalTwo[j]);
}
for(var j=0;j&lt;7;j++){
    redPortalOne[j]=instance_create(-50,-50,objPowerCube);
    redPortalOne[j].side = "r";
    ds_list_add(cubeIds, redPortalOne[j]);
}
for(var j=0;j&lt;7;j++){
    redPortalTwo[j]=instance_create(-50,-50,objPowerCube);
    redPortalTwo[j].side = "r";
    ds_list_add(cubeIds, redPortalTwo[j]);  
}

for (var i = 0; i &lt; numNumbers; i++) {
    var tempX = xOffset + numberWidth / 2 + i * (numberWidth + numberInBetweenDist);
    var a = instance_create(tempX, yOffset + numberHeight / 2, objRedNumber);
    a.tenPower = numNumbers - i - 1;
    a = instance_create(room_width - tempX, yOffset + numberHeight / 2, objBlueNumber);
    a.tenPower = i;
}
timerOffset=10;
secondsTens=instance_create(room_width/2,yOffset + numberHeight / 2,objTimerSecondTens);
secondsOnes=instance_create(room_width/2+numberInBetweenDist+numberWidth,yOffset + numberHeight / 2,objTimerSecondOnes);
colon=instance_create(room_width/2-numberWidth,yOffset + numberHeight / 2,objColon);
minutes=instance_create(room_width/2-2*numberWidth,yOffset+numberHeight/2,objTimerMinutes);
//switches and scale
var switchWidth = scrGetWidth(objSwitchInBetween);
var switchHeight = scrGetHeight(objSwitchInBetween);
var switchXOffset = 356;
redSwitch = instance_create(switchXOffset + switchWidth / 2, room_height / 2-offset/2, objSwitchInBetween);
blueSwitch = instance_create(room_width - switchXOffset - switchWidth / 2, room_height / 2-offset/2, objSwitchInBetween);
scale = instance_create(room_width / 2, room_height / 2-offset/2, objScaleInBetween);

//cubes
var cubeSize = scrGetWidth(objPowerCube);
var switchTotalHeight = 2 * scrGetHeight(objSwitchPlate) + switchHeight;
var numCubes = 6;
var cubeInBetween = (switchTotalHeight - cubeSize) / (numCubes - 1);
var looksGoodOffset = 3;

for (var i = 0; i &lt; numCubes; i++) {
    var tempX = switchXOffset + switchWidth + cubeSize / 2 + looksGoodOffset;
    var tempY = (room_height-offset - switchTotalHeight) / 2 + cubeSize / 2 + cubeInBetween * i;
    var a = instance_create(tempX, tempY, objPowerCube);
    a.side = "none";
    ds_list_add(cubeIds, a);
    a = instance_create(room_width - tempX, tempY, objPowerCube);
    a.side = "none";
    ds_list_add(cubeIds, a);
}

var pyramidSize = 3;

for (var layer = pyramidSize; layer &gt; 0; layer--) {
    for (var i = 0; i &lt; layer; i++) {
        var tempX = switchXOffset - (i + 0.5) * cubeSize - looksGoodOffset;
    
        for (var j = 0; j &lt; layer - i; j++) {
            var tempY = room_height / 2 - offset / 2 - (layer - i - 1) * cubeSize / 2 + j * cubeSize;
            var a = instance_create(tempX, tempY, objPowerCube);
            a.side = "r";
            a.depth = layer - pyramidSize - 1;
            ds_list_add(cubeIds, a);
            a = instance_create(room_width - tempX, tempY, objPowerCube);
            a.side = "b";
            a.depth = layer - pyramidSize - 1;
            ds_list_add(cubeIds, a);
        }
    }
}

//lines
var autoDist = 305;
instance_create(autoDist, room_height / 2-offset/2, objLine);
instance_create(room_width - autoDist, room_height / 2-offset/2, objLine);
instance_create(room_width / 2, room_height / 2-offset/2, objLine);
var powerCubeZoneWidth = scrGetWidth(objRedPowerCubeZone);
instance_create(redSwitch.x - redSwitch.sprite_width / 2 - powerCubeZoneWidth / 2, room_height / 2 - offset / 2, objRedPowerCubeZone);
instance_create(blueSwitch.x + blueSwitch.sprite_width / 2 + powerCubeZoneWidth / 2, room_height / 2 - offset / 2, objBluePowerCubeZone);

//walls
wallWidth=75;
dropWidth=40;
//field
instance_create(wallWidth/2, room_height/2-offset/2 , objRedAllianceWall);
instance_create(room_width-wallWidth/2, room_height/2-offset/2 , objBlueAllianceWall);

redAllianceDrop=instance_create(wallWidth-dropWidth/2,room_height/2-100-offset/2,objDrop);
redAllianceDrop.image_angle+=90;
blueAllianceDrop=instance_create(room_width-wallWidth+dropWidth/2,room_height/2+100-offset/2,objDrop);
blueAllianceDrop.image_angle-=90;
redAllianceDrop.depth=-100000;
blueAllianceDrop.depth=-100000;
exchangeWidth=60;
redExchangeZone=instance_create(wallWidth+exchangeWidth/2,room_height/2-100-offset/2,objExchange);
redExchangeZone.side="r";
blueExchangeZone=instance_create(room_width-wallWidth-exchangeWidth/2,room_height/2+100-offset/2,objExchange);
blueExchangeZone.side="b";


portalWidth=196;
portalHeight=38;
blue1Portal1=instance_create(portalWidth/2,portalHeight/2,objBluePortal);

blue1Portal2=instance_create(portalWidth/2,3*portalHeight/2,objBluePortal2);
bluePortal1MidpointX=blue1Portal2.x+37.5;
bluePortal1MidpointY=blue1Portal2.y;
globalvar dropBlue1;
dropBlue1=instance_create(bluePortal1MidpointX+dsin(17.3)*30,bluePortal1MidpointY+dcos(17.3)*30,objPortalExchange);
dropBlue1.image_angle+=17.3;


red1Portal1=instance_create(room_width-portalWidth/2,portalHeight/2,objRedPortal);
red1Portal2=instance_create(room_width-portalWidth/2,3*portalHeight/2,objRedPortal2);
red1Portal1.image_xscale*=-1;
red1Portal2.image_xscale*=-1;

redPortal1MidpointX=red1Portal2.x-37.5;
redPortal1MidpointY=red1Portal2.y;
globalvar dropRed1;
dropRed1=instance_create(redPortal1MidpointX-dsin(17.3)*30,redPortal1MidpointY+dcos(17.3)*30,objPortalExchange);
dropRed1.image_angle-=17.3;


blue2Portal1=instance_create(portalWidth/2,room_height-portalHeight/2-offset,objBluePortal);
blue2Portal2=instance_create(portalWidth/2,room_height-3*portalHeight/2-offset,objBluePortal2);
blue2Portal1.image_yscale*=-1;
blue2Portal2.image_yscale*=-1;
bluePortal2MidpointX=blue2Portal2.x+37.5;
bluePortal2MidpointY=blue2Portal2.y;
globalvar dropBlue2;
dropBlue2=instance_create(bluePortal2MidpointX+dsin(17.3)*30,bluePortal2MidpointY-dcos(17.3)*30,objPortalExchange);
dropBlue2.image_angle-=17.3;

red2Portal1=instance_create(room_width-portalWidth/2,room_height-portalHeight/2-offset,objRedPortal);
red2Portal2=instance_create(room_width-portalWidth/2,room_height-3*portalHeight/2-offset,objRedPortal2);
redPortal2MidpointX=red2Portal2.x-37.5;
redPortal2MidpointY=red2Portal2.y;
globalvar dropRed2;
dropRed2=instance_create(redPortal2MidpointX-dsin(17.3)*30,redPortal2MidpointY-dcos(17.3)*30,objPortalExchange);
dropRed2.image_angle+=17.3;

red2Portal1.image_xscale*=-1;
red2Portal2.image_xscale*=-1;
red2Portal1.image_yscale*=-1;
red2Portal2.image_yscale*=-1;
wallTop=instance_create(room_width/2,portalHeight/2,objWall);
wallBottom=instance_create(room_width/2,room_height-portalHeight/2-offset,objWall);
wallBottom.image_yscale*=-1;

//power up UI
sideOffset=73;
middleOffset=50;
globalvar fieldHeight;
fieldHeight=823;
height=(1200-fieldHeight)/2+fieldHeight;
portalWidth=150;
barWidth=300;
globalvar redForce;
globalvar redBoost;
globalvar redLevitate;
globalvar blueForce;
globalvar blueBoost;
globalvar blueLevitate;
redForce=instance_create(sideOffset+portalWidth/2,height,objRedForce);
redBoost=instance_create(sideOffset+portalWidth/2+middleOffset+portalWidth,height,objRedBoost);
redLevitate=instance_create(sideOffset+portalWidth/2+2*middleOffset+2*portalWidth,height,objRedLevitate);
blueForce=instance_create(sideOffset+portalWidth/2+4*middleOffset+3*portalWidth+barWidth,height,objBlueForce);
blueBoost=instance_create(sideOffset+portalWidth/2+5*middleOffset+4*portalWidth+barWidth,height,objBlueBoost);
blueLevitate=instance_create(sideOffset+portalWidth/2+6*middleOffset+5*portalWidth+barWidth,height,objBlueLevitate);
globalvar activatedPowerup;
activatedPowerup = instance_create(0, 0, objData);
activatedPowerup.type = 255;
activatedPowerup.side = "none";
activatedPowerup.powerLevel = 0;
globalvar powerupBarYPos;
powerupBarYPos = 1000;

///robots
var robotXOffset = 150;
var robotYDiff = 200;
globalvar positions;
positions[0] = "rt";
positions[1] = "rm";
positions[2] = "rb";
positions[3] = "bt";
positions[4] = "bm";
positions[5] = "bb";
 
globalvar thisInControl;

for (var i = 0; i &lt; numRobots; i++) {
    if (controlSchemes[i] == "none") {
        thisInControl[i] = false;
    } else {
        thisInControl[i] = true;
    }
}

var tempXPoses;

for (var i = 0; i &lt; numRobots; i++) {
    if (i &lt; numRobots / 2) {
        tempXPoses[i] = robotXOffset;
    } else {
        tempXPoses[i] = room_width - robotXOffset;
    }
}

var tempYPoses;
var tempYPos = (room_height - offset) / 2 - robotYDiff;
tempYPoses[0] = tempYPos;
tempYPoses[3] = tempYPos;
tempYPos = (room_height - offset) / 2;
tempYPoses[1] = tempYPos;
tempYPoses[4] = tempYPos;
tempYPos = (room_height - offset) / 2 + robotYDiff;
tempYPoses[2] = tempYPos;
tempYPoses[5] = tempYPos;

for (var i = 0; i &lt; numRobots; i++) {
    if (!thisInControl[i]) {
        robotIds[i] = instance_create(tempXPoses[i], tempYPoses[i], objRobotPuppet);
        
        if (i &lt; numRobots / 2) {
            robotIds[i].sprite_index = sprRedRobot;
        } else {
            robotIds[i].sprite_index = sprBlueRobot;
        }
    } else {
        controllerIds[i] = instance_create(tempXPoses[i], tempYPoses[i], objRobotController);
        controllerIds[i].controlScheme = controlSchemes[i];
        
        if (i &lt; numRobots / 2) {
            controllerIds[i].robotId.side = "r";
            controllerIds[i].robotId.dir = 0;
        } else {
            controllerIds[i].robotId.side = "b";
            controllerIds[i].robotId.dir = 180;
        }
        
        robotIds[i] = controllerIds[i].robotId;
    }
}

instance_create(0, 0, objClient);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///score
if (redSwitch.redCubes &gt; redSwitch.blueCubes || (powerupEffects[0].type == 0 &amp;&amp; powerupEffects[0].side == "r")) {
    pointSide[0] = "r";
} else {
    pointSide[0] = "none";
}

if (blueSwitch.blueCubes &gt; blueSwitch.redCubes || (powerupEffects[2].type == 0 &amp;&amp; powerupEffects[2].side == "b")) {
    pointSide[2] = "b";
} else {
    pointSide[2] = "none";
}

if (scale.redCubes &gt; scale.blueCubes || (powerupEffects[1].type == 0 &amp;&amp; powerupEffects[1].side == "r")) {
    pointSide[1] = "r";
} else if (scale.blueCubes &gt; scale.redCubes || (powerupEffects[1].type == 0 &amp;&amp; powerupEffects[1].side == "b")) {
    pointSide[1] = "b";
} else {
    pointSide[1] = "none";
}

for (var i = 0; i &lt; 3; i++) {
    if (powerupEffects[i].type == 1) {
        if (powerupEffects[i].side == "r") {
            redPointValue[i] = 2;
            bluePointValue[i] = 1;
        } else if (powerupEffects[i].side == "b") {
            bluePointValue[i] = 2;
            redPointValue[i] = 1;
        }
    } else {
        redPointValue[i] = 1;
        bluePointValue[i] = 1;
    }
}

if (gameInPlay &amp;&amp; masterTime % room_speed == 1) {
    for (var i = 0; i &lt; 3; i++) {
        if (pointSide[i] == "r") {
            redScore += redPointValue[i];
        } else if (pointSide[i] == "b") {
            blueScore += bluePointValue[i];
        }
    }
}

//masterTime++;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///timer
if (masterTime &gt; gameTime) {
    gameInPlay = false;
} else if (masterTime != 0) {
    gameInPlay = true;
} else {
    gameInPlay = false;
}

if (gameInPlay) {
    secondsOnes.num = (masterTime / room_speed) % 10;
    secondsTens.num = (masterTime / room_speed / 10) % 6;
    minutes.num = (masterTime / room_speed / 60) % 10;
} else if (masterTime &gt; gameTime) {
    secondsOnes.num = (gameTime / room_speed) % 10;
    secondsTens.num = (gameTime / room_speed / 10) % 6;
    minutes.num = (gameTime / room_speed / 60) % 10;
} else {
    secondsOnes.num = 0;
    secondsTens.num = 0;
    minutes.num = 0;
}
        
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///portal

with(dropRed1){
    bot=instance_place(x,y,objRobot);
    
    if(bot!=noone&amp;&amp;bot.holdingId==noone&amp;&amp;bot.side=="r"){
        
        if(dropRed1.numCubes&gt;0&amp;&amp;bot.pickUpId==noone){ 
            
            dropRed1.numCubes--;
            bot.pickUpId=redPortalOne[dropRed1.numCubes];

            
            
        }
    }
    
}
with(dropBlue1){
    bot=instance_place(x,y,objRobot);
    if(bot!=noone&amp;&amp;bot.holdingId==noone&amp;&amp;bot.side=="b"){
        if(dropBlue1.numCubes&gt;0&amp;&amp;bot.pickUpId==noone){
          
            dropBlue1.numCubes--;
            bot.pickUpId=bluePortalOne[dropBlue1.numCubes];
        }
    }
}
with(dropRed2){
    bot=instance_place(x,y,objRobot);
    if(bot!=noone&amp;&amp;bot.holdingId==noone&amp;&amp;bot.side=="r"){
        if(dropRed2.numCubes&gt;0&amp;&amp;bot.pickUpId==noone){
        
            dropRed2.numCubes--;
            bot.pickUpId=redPortalTwo[dropRed2.numCubes];
            
        }
    }
}
with(dropBlue2){
    bot=instance_place(x,y,objRobot);
    if(bot!=noone&amp;&amp;bot.holdingId==noone&amp;&amp;bot.side=="b"){
        if(dropBlue2.numCubes&gt;0&amp;&amp;bot.pickUpId==noone){

            dropBlue2.numCubes--;
            bot.pickUpId=bluePortalTwo[dropBlue2.numCubes];
            
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///other
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
