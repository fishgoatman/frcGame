<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///vars
///globalvars
///general
globalvar mode;
mode = "online";

///field
globalvar px2cm;
px2cm = 1;
globalvar pixelToEncoder;
globalvar blueScore;
blueScore = 0;
globalvar redScore;
redScore = 0;
globalvar blueSwitchCubes;
blueSwitchCubes = 0;
globalvar redSwitchCubes;
redSwitchCubes = 0;
globalvar redSwitchScore;
redSwitchScore = 1;
globalvar blueSwitchScore;
blueSwitchScore = 1;
globalvar scaleScore;
scaleScore = 1;
globalvar collisionArray;
globalvar chunkSize;
chunkSize = 20;
globalvar robotSize;
robotSize = 32;
globalvar thisManipulatedCubeIds;
thisManipulatedCubeIds = ds_list_create();

///robot
//km
globalvar topSpd; //this spd is multiplied off of for thrust controls
topSpd = (600 / room_speed);
globalvar currTopSpd;
currTopSpd = topSpd;
globalvar baseTurnSpd; //the amount of degrees to turn per degree of steering wheel turn
baseTurnSpd = 2.5 / room_speed;
globalvar angleGrace;
angleGrace = 10;
//other
globalvar iXPos;
iXPos = 150;
globalvar iYPos;
iYPos = 150;
globalvar iDir;
iDir = 0;
globalvar test;
test=5;
globalvar time;
globalvar laserTimer;
laserTimer = 100;
time = 0;
globalvar controlling;
controlling=true;
globalvar numRobots;
numRobots = 6;
globalvar robotIds;
globalvar cubeIds;
cubeIds = ds_list_create();

///useless stuff
//stuff needed to make robot be able to take parameters cuz game maker shit
globalvar robotTempCid;
globalvar robotTempXPos;
globalvar robotTempYPos;
globalvar robotTempDir;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///creation stuff
/*var temp = ds_list_create();
var subTemp = ds_list_create();
ds_list_add(subTemp, 3);
ds_list_add(temp, subTemp);
show_debug_message(ds_list_find_value(ds_list_find_value(temp, 0), 0));
ds_list_add(ds_list_find_value(temp, 0), 5);
show_debug_message(ds_list_find_value(ds_list_find_value(temp, 0), 1));*/

///general
randomize();
texture_set_interpolation(false);
window_set_fullscreen(false);
instance_create(0, 0, objClient);

///power up field
//walls
instance_create(0, 76 * px2cm, objAllianceWall);
instance_create(room_width - objAllianceWall.sprite_width, 76 * px2cm, objAllianceWall);

//score
var numberWidth = scrGetWidth(objRedNumber);
var numberHeight = scrGetHeight(objRedNumber);
var numberInBetweenDist = 10;
var xOffset = 100;
var yOffset = 50;
var numNumbers = 3;

for (var i = 0; i &lt; numNumbers; i++) {
    var tempX = xOffset + numberWidth / 2 + i * (numberWidth + numberInBetweenDist);
    var a = instance_create(tempX, yOffset + numberHeight / 2, objRedNumber);
    a.tenPower = numNumbers - i - 1;
    a = instance_create(room_width - tempX, yOffset + numberHeight / 2, objBlueNumber);
    a.tenPower = i;
}

//switches and scale
var switchWidth = scrGetWidth(objSwitchInBetween);
var switchHeight = scrGetHeight(objSwitchInBetween);
var switchXOffset = 356;
redSwitch = instance_create(switchXOffset + switchWidth / 2, room_height / 2, objSwitchInBetween);
blueSwitch = instance_create(room_width - switchXOffset - switchWidth / 2, room_height / 2, objSwitchInBetween);
scale = instance_create(room_width / 2, room_height / 2, objScaleInBetween);

//cubes
var cubeSize = scrGetWidth(objPowerCube);
var switchTotalHeight = 2 * scrGetHeight(objSwitchPlate) + switchHeight;
var numCubes = 6;
var cubeInBetween = (switchTotalHeight - cubeSize) / (numCubes - 1);
var looksGoodOffset = 3;

for (var i = 0; i &lt; numCubes; i++) {
    var tempX = switchXOffset + switchWidth + cubeSize / 2 + looksGoodOffset;
    var tempY = (room_height - switchTotalHeight) / 2 + cubeSize / 2 + cubeInBetween * i;
    instance_create(tempX, tempY, objPowerCube);
    instance_create(room_width - tempX, tempY, objPowerCube);
}

var pyramidSize = 3;

for (var layer = pyramidSize; layer &gt; 0; layer--) {
    for (var i = 0; i &lt; layer; i++) {
        var tempX = switchXOffset - (i + 0.5) * cubeSize - looksGoodOffset;
    
        for (var j = 0; j &lt; layer - i; j++) {
            var tempY = room_height / 2 - (layer - i - 1) * cubeSize / 2 + j * cubeSize;
            var a = instance_create(tempX, tempY, objPowerCube);
            a.depth = layer - pyramidSize - 1;
            a = instance_create(room_width - tempX, tempY, objPowerCube);
            a.depth = layer - pyramidSize - 1;
            ds_list_add(cubeIds, a);
        }
    }
}

//lines
var autoDist = 305;
instance_create(autoDist, room_height / 2, objLine);
instance_create(room_width - autoDist, room_height / 2, objLine);
instance_create(room_width / 2, room_height / 2, objLine);

//walls
dropWidth=40;
redAllianceDrop=instance_create(75-dropWidth/2,room_height/2-100,objDrop);
redAllianceDrop.image_angle+=90;
blueAllianceDrop=instance_create(room_width-75+dropWidth/2,room_height/2+100,objDrop);
blueAllianceDrop.image_angle-=90;
instance_create(75/2, room_height/2 , objRedAllianceWall);
instance_create(room_width-75/2, room_height/2 , objBlueAllianceWall);
portalWidth=196;
portalHeight=38;
blue1Portal1=instance_create(portalWidth/2,portalHeight/2,objBluePortal);
blue1Portal2=instance_create(portalWidth/2,3*portalHeight/2,objBluePortal2);
red1Portal1=instance_create(room_width-portalWidth/2,portalHeight/2,objRedPortal);
red1Portal2=instance_create(room_width-portalWidth/2,3*portalHeight/2,objRedPortal2);
red1Portal1.image_xscale*=-1;
red1Portal2.image_xscale*=-1;
blue2Portal1=instance_create(portalWidth/2,room_height-portalHeight/2,objBluePortal);
blue2Portal2=instance_create(portalWidth/2,room_height-3*portalHeight/2,objBluePortal2);
red2Portal1=instance_create(room_width-portalWidth/2,room_height-portalHeight/2,objRedPortal);
red2Portal2=instance_create(room_width-portalWidth/2,room_height-3*portalHeight/2,objRedPortal2);
blue2Portal1.image_yscale*=-1;
blue2Portal2.image_yscale*=-1;
red2Portal1.image_xscale*=-1;
red2Portal2.image_xscale*=-1;
red2Portal1.image_yscale*=-1;
red2Portal2.image_yscale*=-1;
wallTop=instance_create(room_width/2,portalHeight/2,objWall);
wallBottom=instance_create(room_width/2,room_height-portalHeight/2,objWall);
wallBottom.image_yscale*=-1;

var width = ceil(room_width / chunkSize);
var height = ceil(room_height / chunkSize);
mask_index = sprCollisionCheck;

for (r = 0; r &lt; height; r++) {
    for (c = 0; c &lt; width; c++) {
        if (place_meeting(c * chunkSize, r * chunkSize, objBlock)) {
            collisionArray[r, c] = 1;
        } else {
            collisionArray[r, c] = 0;
        }
    }
}

var tempArray;

for (r = 0; r &lt; height; r++) {
    for (c = 0; c &lt; width; c++) {
        if (scrValid(c * chunkSize, r * chunkSize, 0)) {
            tempArray[r, c] = 0;
        } else {
            tempArray[r, c] = 1;
        }
    }
}

///robots
var robotXOffset = 150;
var robotYDiff = 200;
globalvar positions;
positions[0] = "rt";
positions[1] = "rm";
positions[2] = "rb";
positions[3] = "bt";
positions[4] = "bm";
positions[5] = "bb";

for (var i = 0; i &lt; numRobots; i++) {
    controlSchemes[i] = "none";
}

controlSchemes[3] = "mo";
controlSchemes[4] = "ko";    
globalvar thisInControl;

for (var i = 0; i &lt; numRobots; i++) {
    if (controlSchemes[i] == "none") {
        thisInControl[i] = false;
    } else {
        thisInControl[i] = true;
    }
}

var tempXPoses;

for (var i = 0; i &lt; numRobots; i++) {
    if (i &lt; numRobots / 2) {
        tempXPoses[i] = robotXOffset;
    } else {
        tempXPoses[i] = room_width - robotXOffset;
    }
}

var tempYPoses;
var tempYPos = room_height / 2 - robotYDiff;
tempYPoses[0] = tempYPos;
tempYPoses[3] = tempYPos;
tempYPos = room_height / 2;
tempYPoses[1] = tempYPos;
tempYPoses[4] = tempYPos;
tempYPos = room_height / 2 + robotYDiff;
tempYPoses[2] = tempYPos;
tempYPoses[5] = tempYPos;

for (var i = 0; i &lt; numRobots; i++) {
    if (!thisInControl[i]) {
        robotIds[i] = instance_create(tempXPoses[i], tempYPoses[i], objRobotPuppet);
        
        if (i &lt; numRobots / 2) {
            robotIds[i].sprite_index = sprRedRobot;
        } else {
            robotIds[i].sprite_index = sprBlueRobot;
        }
    } else {
        controllerIds[i] = instance_create(tempXPoses[i], tempYPoses[i], objRobotController);
        controllerIds[i].controlScheme = controlSchemes[i];
        
        if (i &lt; numRobots / 2) {
            controllerIds[i].robotId.side = "red";
        } else {
            controllerIds[i].robotId.side = "blue";
        }
        
        robotIds[i] = controllerIds[i].robotId;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///stuff
time++;
if(room==robots){
    if(random(200)&lt;1){
        instance_create(random(room_height),random(room_width),objGear);
    }
}
if(room==obstacle){
    if(time&gt;laserTimer){
        laserTimer=10000000000000;
        scrMakeLasers();
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///score
if (redSwitch.redCubes &gt; redSwitch.blueCubes) {
    redScore += redSwitchScore / room_speed;
}

if (blueSwitch.blueCubes &gt; blueSwitch.redCubes) {
    blueScore += blueSwitchScore / room_speed;
}

if (scale.redCubes &gt; scale.blueCubes) {
    redScore += scaleScore / room_speed;
} else if (scale.blueCubes &gt; scale.redCubes) {
    blueScore += scaleScore / room_speed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
