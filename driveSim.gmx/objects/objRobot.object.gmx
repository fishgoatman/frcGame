<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBlueRobot</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///creation stuff
//stats
pickUpTime = 0.8 * room_speed;
putDownGroundTime = 0.3 * room_speed;
putDownSwitchTime = 0.8 * room_speed;
putDownScaleTime = 1.2 * room_speed;
cubeDropDist = 80;

//necessary vars
cid = -1; //id of the controller, will use later when making server
xPos = x; //this variable will be accessed by the controller
yPos = y; //same
dir = 0; //same, also, is in degrees
pXPos = xPos;
pYPos = yPos;
dXPos = 0;
dYPos = 0;
dDir = 0;
xVel = 0; //m/s
yVel = 0; //m/s
p = 0; //kgm/s
moveableCollisionId = noone;
pickUpId = noone;
holdingId = noone;
putDown = false;
state = "driving";
pickUpPre = 0;
putDownPre = 0;
symbolId = noone;
setPutDownTime = false;
putDownTime = 999;
pickUpAuthorized = false;

if (x &lt; room_width / 2) {
    side = "red";
} else {
    side = "blue";
}

if (side == "red") {
    noneSprite = sprRedRobot;
    pickingUpSprite = sprRedRobotPickingUp;
    holdingSprite = sprRedRobotHoldingCube;
} else {
    noneSprite = sprBlueRobot;
    pickingUpSprite = sprBlueRobotPickingUp;
    holdingSprite = sprBlueRobotHoldingCube;
}

//initial stuff
x = scrRound(xPos);
y = scrRound(yPos);
image_angle = dir;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///actions
if (state == "driving") {
    pos = scrMove(id, xPos, yPos, dXPos, dYPos); //moves straight in this dx and dy and handles collisions
    xPos = pos[0];
    yPos = pos[1];
    x = scrRound(xPos);
    y = scrRound(yPos);
    var angleDiff = image_angle - point_direction(xPos, yPos, mouse_x, mouse_y);
    
    if (controllerId.controlScheme == "mo" &amp;&amp; abs(dDir) &gt; abs(darcsin(dsin(angleDiff)))) {
        dir = point_direction(xPos, yPos, mouse_x, mouse_y);
    } else {
        dir += dDir;
    }
    
    dir %= 360;
    image_angle = dir;
}

//restart
if (keyboard_check_direct(ord("R"))) {
    xPos = iXPos;
    yPos = iYPos;
    dir = iDir;
}

if(room == obstacle){
    if(place_meeting(x,y,objLaser)){
        controlling=false;
        instance_destroy();
    }
}

if (!place_meeting(x,y,objRubber)) {
    currTopSpd = topSpd;
}

if (pickUpId != noone) {
    if (mode == "offline" || mode == "online" &amp;&amp; pickUpAuthorized) {
        if (!pickUpId.placed) {
            pickUpPre++;
            state = "pickingUp";
        }
    }
}

if (pickUpPre &gt;= pickUpTime) {
    var check = instance_create(xPos, yPos, objPickUpCheck);
    check.image_angle = image_angle;
    checkCollisionId = noone;
    
    with (check) {
        other.checkCollisionId = instance_place(x, y, objPowerCube);
        instance_destroy();
    }

    if (holdingId == noone &amp;&amp; checkCollisionId != noone) {
        holdingId = pickUpId;
        holdingId.x = -50;
        holdingId.y = -50;
        ds_list_add(thisManipulatedCubeIds, holdingId);
    }
    
    pickUpId = noone;
    pickUpPre = 0;
    state = "driving";
    pickUpAuthorized = false;
}

if (putDown) {
    show_debug_message("a");

    if (holdingId != noone) {
        putDownPre++;
        state = "puttingDown";
        
        if (!setPutDownTime) {
            with (holdingId) {
                var tempX = other.xPos + other.cubeDropDist * dcos(other.image_angle);
                var tempY = other.yPos - other.cubeDropDist * dsin(other.image_angle);
                var tempTime;
                
                if (place_meeting(tempX, tempY, objSwitchPlate)) {
                    tempTime = other.putDownSwitchTime;
                } else if (place_meeting(tempX, tempY, objScalePlate)) {
                    tempTime = other.putDownScaleTime;
                } else {
                    tempTime = other.putDownGroundTime;
                }
                
                other.putDownTime = tempTime;
                other.setPutDownTime = true;
            }
        }
    } else {
        putDown = false;
    }
}

if (putDownPre &gt;= putDownTime) {
    holdingId.x = xPos + cubeDropDist * dcos(image_angle);
    holdingId.y = yPos - cubeDropDist * dsin(image_angle);
    holdingId.image_angle = image_angle;
    holdingId = noone;
    putDownPre = 0;
    putDown = false;
    state = "driving";
    setPutDownTime = false;
}   
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sprite and image
if (state == "driving") {
    sprite_index = noneSprite;
    
    if (symbolId != noone) {
        with (symbolId) {
            instance_destroy();
        }
        
        symbolId = noone;
    }
} else if (state == "pickingUp") {
    sprite_index = pickingUpSprite;
    
    if (symbolId == noone) {
        symbolId = instance_create(x, y, objBluePickingUpSymbol);
    }
} else if (state == "puttingDown") {
    sprite_index = pickingUpSprite;
    
    if (symbolId == noone) {
        symbolId = instance_create(x, y, objBluePuttingDownSymbol);
    }
}

if (holdingId != noone) {
    sprite_index = holdingSprite;
} else {
    sprite_index = noneSprite;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
