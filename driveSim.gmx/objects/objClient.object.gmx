<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///creation stuff
globalvar PORT_NUM;
PORT_NUM = 54796;
globalvar IP_NUM;
IP_NUM = objMaster.ipString;
globalvar clientSocket;
clientSocket = network_create_socket(network_socket_udp);
globalvar connectedToServer;
connectedToServer = false;
redTimer = noone;
blueTimer = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///server stuff
if (!connectedToServer) {
    var bufferToSend = buffer_create(256, buffer_fixed, 1);
    buffer_seek(bufferToSend, buffer_seek_start, 0);
    buffer_write(bufferToSend, buffer_string, "c"); //connection
    network_send_udp(clientSocket, IP_NUM, PORT_NUM, bufferToSend, buffer_tell(bufferToSend));
    buffer_delete(bufferToSend);
} else {
    //robot
    for (var i = 0; i &lt; numRobots; i++) {
        if (thisInControl[i]) {
            var bufferToSend = buffer_create(256, buffer_fixed, 1);
            buffer_seek(bufferToSend, buffer_seek_start, 0);
            buffer_write(bufferToSend, buffer_string, "r");
            var robotId = robotIds[i];
            buffer_write(bufferToSend, buffer_u8, i);
            buffer_write(bufferToSend, buffer_f32, robotId.xPos);
            buffer_write(bufferToSend, buffer_f32, robotId.yPos);
            buffer_write(bufferToSend, buffer_f32, robotId.image_angle);
            buffer_write(bufferToSend, buffer_u32, robotId.sprite_index);
            network_send_udp(clientSocket, IP_NUM, PORT_NUM, bufferToSend, buffer_tell(bufferToSend));
            buffer_delete(bufferToSend);
        }
    }
    
    //pick up
    for (var i = 0; i &lt; numRobots; i++) {
        if (thisInControl[i] &amp;&amp; robotIds[i].pickUpId != noone) {
            var bufferToSend = buffer_create(256, buffer_fixed, 1);
            buffer_seek(bufferToSend, buffer_seek_start, 0);
            buffer_write(bufferToSend, buffer_string, "pu");
            buffer_write(bufferToSend, buffer_u8, i);
            var cubeNum = ds_list_find_index(cubeIds, robotIds[i].pickUpId);
            buffer_write(bufferToSend, buffer_u32, cubeNum);
            network_send_udp(clientSocket, IP_NUM, PORT_NUM, bufferToSend, buffer_tell(bufferToSend));
            buffer_delete(bufferToSend);
        }
    }
    
    //put down
    for (var i = 0; i &lt; numRobots; i++) {
        var robotId = robotIds[i];    
    
        if (thisInControl[i] &amp;&amp; robotId.putDown &amp;&amp; robotId.holdingId != noone) {
            var bufferToSend = buffer_create(256, buffer_fixed, 1);
            buffer_seek(bufferToSend, buffer_seek_start, 0);
            buffer_write(bufferToSend, buffer_string, "pd");
            buffer_write(bufferToSend, buffer_u32, ds_list_find_index(cubeIds, robotId.holdingId));
            buffer_write(bufferToSend, buffer_u32, robotId.putDownX);
            buffer_write(bufferToSend, buffer_u32, robotId.putDownY);
            buffer_write(bufferToSend, buffer_u32, robotId.image_angle);
            network_send_udp(clientSocket, IP_NUM, PORT_NUM, bufferToSend, buffer_tell(bufferToSend));
            buffer_delete(bufferToSend);
        }
    }
    
    //cubes
    var bufferToSend = buffer_create(256, buffer_fixed, 1);
    buffer_seek(bufferToSend, buffer_seek_start, 0);
    buffer_write(bufferToSend, buffer_string, "cb"); //cubes
    var num = ds_list_size(thisManipulatedCubeIds);
    buffer_write(bufferToSend, buffer_u32, num);
    
    for (var i = 0; i &lt; num; i++) {
        var cubePos = ds_list_find_value(thisManipulatedCubeIds, i);
        var tempCube = ds_list_find_value(cubeIds, cubePos);
        buffer_write(bufferToSend, buffer_u32, cubePos);
        buffer_write(bufferToSend, buffer_f32, tempCube.x);
        buffer_write(bufferToSend, buffer_f32, tempCube.y);
        buffer_write(bufferToSend, buffer_f32, tempCube.image_angle);
    }
    
    network_send_udp(clientSocket, IP_NUM, PORT_NUM, bufferToSend, buffer_tell(bufferToSend));
    buffer_delete(bufferToSend);
    
    //added cube
    var bufferToSend = buffer_create(256, buffer_fixed, 1);
    buffer_seek(bufferToSend, buffer_seek_start, 0);
    buffer_write(bufferToSend, buffer_string, "ac");
    buffer_write(bufferToSend, buffer_u8, redAddedCube.type);
    buffer_write(bufferToSend, buffer_u32, redAddedCube.num);
    buffer_write(bufferToSend, buffer_u8, blueAddedCube.type);
    buffer_write(bufferToSend, buffer_u32, blueAddedCube.num);
    network_send_udp(clientSocket, IP_NUM, PORT_NUM, bufferToSend, buffer_tell(bufferToSend));
    buffer_delete(bufferToSend);
    
    //powerup
    if (activatedPowerup.type != 255) {
        var bufferToSend = buffer_create(256, buffer_fixed, 1);
        buffer_seek(bufferToSend, buffer_seek_start, 0);
        buffer_write(bufferToSend, buffer_string, "pw");
        buffer_write(bufferToSend, buffer_u8, activatedPowerup.type);
        buffer_write(bufferToSend, buffer_string, activatedPowerup.side);
        network_send_udp(clientSocket, IP_NUM, PORT_NUM, bufferToSend, buffer_tell(bufferToSend));
        buffer_delete(bufferToSend);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///receive data from server
var socketId = ds_map_find_value(async_load, "id");

if (socketId == clientSocket) {
    receivedBuffer = ds_map_find_value(async_load, "buffer");
    buffer_seek(receivedBuffer, buffer_seek_start, 0);
    var type = buffer_read(receivedBuffer, buffer_string);
    
    if (type == "c") { //connection
        connectedToServer = true;
    } else if (connectedToServer) {
        if (type == "f") { //field
            var rando = buffer_read(receivedBuffer, buffer_u8);
            masterTime = buffer_read(receivedBuffer, buffer_u32);
            rando = 2;
            switchTop = rando % 2;
            scaleTop = (rando / 2) % 2;
            redSwitchTop = switchTop;
            blueSwitchTop = switchTop;
        } else if (type == "r") { //robot
            for (var i = 0; i &lt; numRobots; i++) {
                var xPos = buffer_read(receivedBuffer, buffer_f32);
                var yPos = buffer_read(receivedBuffer, buffer_f32);
                var imageAngle = buffer_read(receivedBuffer, buffer_f32);
                var spriteIndex = buffer_read(receivedBuffer, buffer_u32);
                
                if (!thisInControl[i]) {
                    var robotId = robotIds[i];
                    robotId.x = xPos;
                    robotId.y = yPos;
                    robotId.image_angle = imageAngle;
                    robotId.sprite_index = spriteIndex;
                }
            }
        } else if (type == "pu") { //pick up
            var position = buffer_read(receivedBuffer, buffer_u8);
            var cubeNum = buffer_read(receivedBuffer, buffer_u32);
            
            if (thisInControl[position]) {
               robotIds[position].pickUpAuthorized = true;
            }
            
            for (var i = 0; i &lt; numRobots; i++) {
                if (thisInControl[i] &amp;&amp; robotIds[i].pickUpId == ds_list_find_value(cubeIds, cubeNum) &amp;&amp; i != position) {
                    robotIds[i].pickUpId = noone;
                }
            }
        } else if (type == "cb") { //cube
            var numChanged = buffer_read(receivedBuffer, buffer_u32);
        
            for (var i = 0; i &lt; numChanged; i++) {
                var cubeNum = buffer_read(receivedBuffer, buffer_u32);
                var xPos = buffer_read(receivedBuffer, buffer_s32);
                var yPos = buffer_read(receivedBuffer, buffer_s32);
                var imageAngle = buffer_read(receivedBuffer, buffer_s32);
                var cubeId = ds_list_find_value(cubeIds, cubeNum);
                var pickingUpOrPuttingDown = false;
                
                for (var j = 0; j &lt; numRobots; j++) {
                    if (thisInControl[j] &amp;&amp; (robotIds[j].pickUpId == cubeId || (robotIds[j].holdingId == cubeId &amp;&amp; robotIds[j].state == "puttingDown"))) {
                        pickingUpOrPuttingDown = true;
                    }
                }
                
                if (!pickingUpOrPuttingDown) {
                    cubeId.x = xPos;
                    cubeId.y = yPos;
                    cubeId.image_angle = imageAngle;
                }
            }
        } else if (type == "ac") { //powerup power level for ui
            for (var i = 0; i &lt; 3; i++) {
                var tempRed = buffer_read(receivedBuffer, buffer_u8);
                var tempBlue = buffer_read(receivedBuffer, buffer_u8);
                
                if (tempRed &gt; redPowerUp[i]) {
                    redScore += 5;
                }
                
                redPowerUp[i] = tempRed;
                
                if (tempBlue &gt; bluePowerUp[i]) {
                    blueScore += 5;
                }
                
                bluePowerUp[i] = tempBlue;
            }
        } else if (type == "pw") { //powerup
            for (var i = 0; i &lt; 3; i++) {
                var powerupType = buffer_read(receivedBuffer, buffer_u8);
                var powerupSide = buffer_read(receivedBuffer, buffer_string);
                
                if (powerupType != 2) {
                    powerupEffects[i].type = powerupType;
                    powerupEffects[i].side = powerupSide;
                    
                    if (powerupType != 255) {
                        activatedPowerup.type = 255;
                    }
                    
                    if (powerupSide == "r") {
                        if (!redLockedOut[powerupType]) {
                            var a = instance_create(room_width / 2, powerupBarYPos, objRedTimer);
                            a.startTime = masterTime;
                        }
                    
                        redLockedOut[powerupType] = true;
                    }
                    
                    if (powerupSide == "b") {
                        if (!blueLockedOut[powerupType]) {
                            var a = instance_create(room_width / 2, powerupBarYPos, objBlueTimer);
                            a.startTime = masterTime;
                        }
                    
                        blueLockedOut[powerupType] = true;
                    }
                }
            }
        } else if (type == "lv") { //levitate
            var red = buffer_read(receivedBuffer, buffer_bool);
            var blue = buffer_read(receivedBuffer, buffer_bool);
            
            if (red &amp;&amp; !redLevitated) {
                redLevitated = true;
                redLockedOut[2] = true;
                redScore += 30;
            }
            
            if (blue &amp;&amp; !blueLevitated) {
                blueLevitated = true;
                blueLockedOut[2] = true;
                blueScore += 30;
            }
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
