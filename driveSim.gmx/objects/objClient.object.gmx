<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///creation stuff
globalvar PORT_NUM;
PORT_NUM = 54796;
globalvar IP_NUM;
IP_NUM = "10.19.91.45";
globalvar clientSocket;
clientSocket = network_create_socket(network_socket_udp);
globalvar connectedToServer;
connectedToServer = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///server stuff
if (!connectedToServer) {
    var bufferToSend = buffer_create(256, buffer_fixed, 1);
    buffer_seek(bufferToSend, buffer_seek_start, 0);
    buffer_write(bufferToSend, buffer_string, "c"); //connection
    network_send_udp(clientSocket, IP_NUM, PORT_NUM, bufferToSend, buffer_tell(bufferToSend));
    buffer_delete(bufferToSend);
} else {
    //robot
    for (var i = 0; i &lt; numRobots; i++) {
        if (thisInControl[i]) {
            var bufferToSend = buffer_create(256, buffer_fixed, 1);
            buffer_seek(bufferToSend, buffer_seek_start, 0);
            buffer_write(bufferToSend, buffer_string, "r");
            var robotId = robotIds[i];
            buffer_write(bufferToSend, buffer_u8, i);
            buffer_write(bufferToSend, buffer_f32, robotId.xPos);
            buffer_write(bufferToSend, buffer_f32, robotId.yPos);
            buffer_write(bufferToSend, buffer_f32, robotId.image_angle);
            buffer_write(bufferToSend, buffer_u32, robotId.sprite_index);
            network_send_udp(clientSocket, IP_NUM, PORT_NUM, bufferToSend, buffer_tell(bufferToSend));
            buffer_delete(bufferToSend);
        }
    }
    
    //pick up
    for (var i = 0; i &lt; numRobots; i++) {
        if (thisInControl[i] &amp;&amp; robotIds[i].pickUpId != noone) {
            var bufferToSend = buffer_create(256, buffer_fixed, 1);
            buffer_seek(bufferToSend, buffer_seek_start, 0);
            buffer_write(bufferToSend, buffer_string, "pu");
            buffer_write(bufferToSend, buffer_u8, i);
            buffer_write(bufferToSend, buffer_u32, ds_list_find_index(cubeIds, robotIds[i].pickUpId));
            network_send_udp(clientSocket, IP_NUM, PORT_NUM, bufferToSend, buffer_tell(bufferToSend));
            buffer_delete(bufferToSend);
        }
    }
    
    //cubes
    var bufferToSend = buffer_create(256, buffer_fixed, 1);
    buffer_seek(bufferToSend, buffer_seek_start, 0);
    buffer_write(bufferToSend, buffer_string, "cb"); //cubes
    var num = ds_list_size(thisManipulatedCubeIds);
    buffer_write(bufferToSend, buffer_u32, num);
    
    for (var i = 0; i &lt; num; i++) {
        var tempCube = ds_list_find_value(thisManipulatedCubeIds, i);
        buffer_write(bufferToSend, buffer_u32, i);
        buffer_write(bufferToSend, buffer_f32, tempCube.x);
        buffer_write(bufferToSend, buffer_f32, tempCube.y);
        buffer_write(bufferToSend, buffer_f32, tempCube.image_angle);
    }
    
    network_send_udp(clientSocket, IP_NUM, PORT_NUM, bufferToSend, buffer_tell(bufferToSend));
    buffer_delete(bufferToSend);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///receive player data from server
var socketId = ds_map_find_value(async_load, "id");

if (socketId == clientSocket) {
    receivedBuffer = ds_map_find_value(async_load, "buffer");
    buffer_seek(receivedBuffer, buffer_seek_start, 0);
    var type = buffer_read(receivedBuffer, buffer_string);
    
    if (type == "c") { //connection
        connectedToServer = true;
    } else if (connectedToServer) {
        if (type == "r") { //robot
            for (var i = 0; i &lt; numRobots; i++) {
                var xPos = buffer_read(receivedBuffer, buffer_f32);
                var yPos = buffer_read(receivedBuffer, buffer_f32);
                var imageAngle = buffer_read(receivedBuffer, buffer_f32);
                var spriteIndex = buffer_read(receivedBuffer, buffer_u32);
                
                if (!thisInControl[i]) {
                    var robotId = robotIds[i];
                    robotId.x = xPos;
                    robotId.y = yPos;
                    robotId.image_angle = imageAngle;
                    robotId.sprite_index = spriteIndex;
                }
            }
        } else if (type == "pu") { //pick up
            var position = buffer_read(receivedBuffer, buffer_u8);
            
            if (thisInControl[position]) {
               robotIds[position].pickUpAuthorized = true;
            }
        } else if (type == "cb") { //cube
            var num = buffer_read(receivedBuffer, buffer_u32);
            show_debug_message("A" + string(num));
            
            for (var i = 0; i &lt; num; i++) {
                var cubeNum = buffer_read(receivedBuffer, buffer_u32);
                var xPos = buffer_read(receivedBuffer, buffer_u32);
                var yPos = buffer_read(receivedBuffer, buffer_u32);
                var imageAngle = buffer_read(receivedBuffer, buffer_u32);
                var cubeId = ds_list_find_value(cubeIds, cubeNum);
                cubeId.x = xPos;
                cubeId.y = yPos;
                cubeId.image_angle = imageAngle;
            }
            
            show_debug_message(num);
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
