<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///creation stuff
ipTextBoxYPos = room_height * 0.4;
doneYPos = room_height * 0.48;
ipTextBox = instance_create(room_width / 2, ipTextBoxYPos, objIpTextBox);
doneButton = instance_create(room_width / 2, doneYPos, objDoneButton);
ipString = "";

for (var i = 0; i &lt; 10; i++) {
    numberInputs[i] = string(i);
}

cursorTime = 0;
cursorString = "|";
cursorBlinkInterval = 0.3 * room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///get input
///ip
if (ipTextBox.inFocus) {
    for (var i = 0; i &lt; array_length_1d(numberInputs); i++) {
        if (keyboard_check_pressed(ord(numberInputs[i]))) {
            ipString += numberInputs[i];
        }
    }
    
    if (keyboard_check_pressed(190)) {
        ipString += ".";
    }
    
    if (keyboard_check_pressed(vk_backspace) || keyboard_check_pressed(vk_delete)) {
        ipString = string_copy(ipString, 0, string_length(ipString) - 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///logic
if (cursorTime &gt; cursorBlinkInterval) {
    cursorTime = 0;
    
    if (cursorString == " ") {
        cursorString = "|";
    } else {
        cursorString = " ";
    }
}

if (!ipTextBox.inFocus) {
    cursorString = " ";
}

cursorTime++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///text
draw_set_color(c_black);
draw_set_halign(fa_center);
draw_set_valign(fa_center);
draw_set_font(fnConsolas);

draw_text(room_width / 2, room_height / 3, "Please enter the ip address of the computer running the server:");

draw_text(room_width / 2, ipTextBoxYPos, ipString + cursorString);

if (doneButton.hovering) {
    doneColor = c_white;
} else {
    doneColor = c_black;
}

draw_set_color(doneColor);
draw_text(room_width / 2, doneYPos, "Done");
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
