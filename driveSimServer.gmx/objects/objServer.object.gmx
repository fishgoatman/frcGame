<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create the server
PORT_NUM = 54795;
serverSocket = network_create_socket_ext(network_socket_udp, PORT_NUM);

if (serverSocket &lt; 0) {
show_debug_message("server creation failed");
} else {
show_debug_message("server successfully created");
}

ipList = ds_list_create();
portList = ds_list_create();
ip = "0.0.0.0";
port = 0;
bufferToSend = buffer_create(256, buffer_fixed, 1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///receiving data from a client
ip = string(ds_map_find_value(async_load, "ip"));
port = ds_map_find_value(async_load, "port");
buffer = ds_map_find_value(async_load, "buffer");
var type = buffer_read(buffer, buffer_string);

if (type == "c") { //connection
    if (ds_list_find_index(ipList, ip) == -1) {
        ds_list_add(ipList, ip);
        ds_list_add(portList, port);
        show_debug_message("client connected");
        numRobots++;
    }
    
    buffer_seek(bufferToSend, buffer_seek_start, 0);
    buffer_write(bufferToSend, buffer_string, "c"); //connection confirm
    network_send_udp(serverSocket, ip, port, bufferToSend, buffer_tell(bufferToSend));
    buffer_delete(bufferToSend);
} else {
    buffer_write(bufferToSend, buffer_string, "r"); //robot

    for (var i = 0; i &lt; ds_list_size(ipList); i++) {
        buffer_seek(bufferToSend, buffer_seek_start, 0);
        
        for (var i = 0; i &lt; numRobots; i++) {
            buffer_write(bufferToSend, buffer_u16, i); //connection confirm
        }
        
        network_send_udp(serverSocket, ip, port, bufferToSend, buffer_tell(bufferToSend));
        buffer_delete(bufferToSend);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
