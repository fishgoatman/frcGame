<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create the server !!!NOTE: MAKE NOTE OF LINE 31
PORT_NUM = 54796;
serverSocket = network_create_socket_ext(network_socket_udp, PORT_NUM);

if (serverSocket &lt; 0) {
    show_debug_message("server creation failed");
} else {
    show_debug_message("server successfully created");
}

ipList = ds_list_create();
portList = ds_list_create();
ip = "0.0.0.0";
port = 0;
bufferToSend = buffer_create(256, buffer_fixed, 1);
numRobots = 6;
positions[0] = "rt";
positions[1] = "rm";
positions[2] = "rb";
positions[3] = "bt";
positions[4] = "bm";
positions[5] = "bb";

for (var i = 0; i &lt; numRobots; i++) {
    xPoses[i] = 0;
    yPoses[i] = 0;
    imageAngles[i] = 0;
    spriteIndexes[i] = 0;
    pickUpNumbers[i] = -1;
}

numCubes = 32;

for (var i = 0; i &lt; numCubes; i++) {
    changedCubes[i] = noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///send data
//robot
for (var i = 0; i &lt; ds_list_size(ipList); i++) {
    bufferToSend = buffer_create(256, buffer_fixed, 1);
    buffer_seek(bufferToSend, buffer_seek_start, 0);
    buffer_write(bufferToSend, buffer_string, "r");
    
    for (var j = 0; j &lt; numRobots; j++) {
        buffer_write(bufferToSend, buffer_f32, xPoses[j]);
        buffer_write(bufferToSend, buffer_f32, yPoses[j]);
        buffer_write(bufferToSend, buffer_f32, imageAngles[j]);
        buffer_write(bufferToSend, buffer_u32, spriteIndexes[j]);
    }
    
    network_send_udp(serverSocket, ds_list_find_value(ipList, i), ds_list_find_value(portList, i), bufferToSend, buffer_tell(bufferToSend));
    buffer_delete(bufferToSend);
}

//pick up
for (var i = 0; i &lt; ds_list_size(ipList); i++) {
    for (var j = 0; j &lt; numRobots; j++) {
        if (pickUpNumbers[j] != -1) {
            bufferToSend = buffer_create(256, buffer_fixed, 1);
            buffer_seek(bufferToSend, buffer_seek_start, 0);
            buffer_write(bufferToSend, buffer_string, "pu");
            buffer_write(bufferToSend, buffer_u8, j);
            network_send_udp(serverSocket, ds_list_find_value(ipList, i), ds_list_find_value(portList, i), bufferToSend, buffer_tell(bufferToSend));
            buffer_delete(bufferToSend);
        }
    }
}

//cubes
for (var i = 0; i &lt; ds_list_size(ipList); i++) {
    var numChanged = 0;

    for (var j = 0; j &lt; numCubes; j++) {
        if (changedCubes[j] != noone) {
            numChanged++;
        }
    }
    
    bufferToSend = buffer_create(256, buffer_fixed, 1);
    buffer_seek(bufferToSend, buffer_seek_start, 0);
    buffer_write(bufferToSend, buffer_string, "cb");
    buffer_write(bufferToSend, buffer_u32, numChanged);
    show_debug_message(numChanged);

    for (var j = 0; j &lt; numCubes; j++) {
        var dataId = changedCubes[j];
        
        if (dataId != noone) {
            buffer_write(bufferToSend, buffer_u32, j);
            buffer_write(bufferToSend, buffer_u32, dataId.xPos);
            buffer_write(bufferToSend, buffer_u32, dataId.yPos);
            buffer_write(bufferToSend, buffer_u32, dataId.imageAngle);
        }
    }
    
    network_send_udp(serverSocket, ds_list_find_value(ipList, i), ds_list_find_value(portList, i), bufferToSend, buffer_tell(bufferToSend));
    buffer_delete(bufferToSend);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///receiving data from a client
ip = string(ds_map_find_value(async_load, "ip"));
port = ds_map_find_value(async_load, "port");
receivedBuffer = ds_map_find_value(async_load, "buffer");
buffer_seek(receivedBuffer, buffer_seek_start, 0);
var type = buffer_read(receivedBuffer, buffer_string);

if (type == "c") { //connection
    if (ds_list_find_index(ipList, ip) == -1) {
        ds_list_add(ipList, ip);
        ds_list_add(portList, port);
        show_debug_message("client connected");
    }
    
    bufferToSend = buffer_create(256, buffer_fixed, 1);
    buffer_seek(bufferToSend, buffer_seek_start, 0);
    buffer_write(bufferToSend, buffer_string, "c"); //connection confirm
    network_send_udp(serverSocket, ip, port, bufferToSend, buffer_tell(bufferToSend));
    buffer_delete(bufferToSend);
} else if (type == "r") { //robot
    var position = buffer_read(receivedBuffer, buffer_u8);
    var xPos = buffer_read(receivedBuffer, buffer_f32);
    var yPos = buffer_read(receivedBuffer, buffer_f32);
    var imageAngle = buffer_read(receivedBuffer, buffer_f32);
    var spriteIndex = buffer_read(receivedBuffer, buffer_u32);
    xPoses[position] = xPos;
    yPoses[position] = yPos;
    imageAngles[position] = imageAngle;
    spriteIndexes[position] = spriteIndex;
} else if (type == "pu") { //pick up
    var position = buffer_read(receivedBuffer, buffer_u8);
    var blockNumber = buffer_read(receivedBuffer, buffer_u32);
    pickUpNumbers[position] = blockNumber;
} else if (type == "cb") { //cube
    var num = buffer_read(receivedBuffer, buffer_u32);
    
    for (var i = 0; i &lt; num; i++) {
        var cubeNum = buffer_read(bufferToSend, buffer_u32);
        var xPos = buffer_read(bufferToSend, buffer_f32);
        var yPos = buffer_read(bufferToSend, buffer_f32);
        var imageAngle = buffer_read(bufferToSend, buffer_f32);
        
        if (changedCubes[cubeNum] == noone) {
            var dataId = instance_create(0, 0, objData);
            dataId.xPos = xPos;
            dataId.yPos = yPos;
            dataId.imageAngle = imageAngle;
            changeCubes[cubeNum] = dataId;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
