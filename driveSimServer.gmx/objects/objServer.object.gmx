<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create the server !!!NOTE: MAKE NOTE OF NUM_CUBES
PORT_NUM = 54796;
serverSocket = network_create_socket_ext(network_socket_udp, PORT_NUM);

if (serverSocket &lt; 0) {
    show_debug_message("server creation failed");
} else {
    show_debug_message("server successfully created");
}

ipList = ds_list_create();
portList = ds_list_create();
ip = "0.0.0.0";
port = 0;
bufferToSend = buffer_create(256, buffer_fixed, 1);
numRobots = 6;
positions[0] = "rt";
positions[1] = "rm";
positions[2] = "rb";
positions[3] = "bt";
positions[4] = "bm";
positions[5] = "bb";

for (var i = 0; i &lt; numRobots; i++) {
    xPoses[i] = 0;
    yPoses[i] = 0;
    imageAngles[i] = 0;
    spriteIndexes[i] = 0;
    pickUpNumbers[i] = -1;
}

numCubes = 60;

for (var i = 0; i &lt; numCubes; i++) {
    changedCubes[i] = noone;
    pickUpPositions[i] = -1;
    blockXPoses[i] = -1;
    blockYPoses[i] = -1;
    blockImageAngles[i] = 0;
}

randomize();
rando = irandom(7); //field arrangement

///powerup stuff
for (var i = 0; i &lt; 6; i++) {
    hasUsedPowerup[i] = false;
}

currentPowerup = instance_create(0, 0, objData);
currentPowerup.type = 255;
currentPowerup.side = "none"; //r, b
currentPowerup.powerLevel = 0;
inQueuePowerup = instance_create(0, 0, objData);
inQueuePowerup.type = 255;
inQueuePowerup.side = "none"; //r, b
inQueuePowerup.powerLevel = 0;
currentPowerupTime = 0;
maxPowerupTime = 10 * room_speed;

for (var i = 0; i &lt; 3; i++) {
    powerupEffects[i] = instance_create(0, 0, objData);
    redPowerupPower[i] = 0;
    bluePowerupPower[i] = 0;
}

invalidNums = ds_list_create();
redOnline = false;
blueOnline = false;
startTime = -1;
startTimeSet = false;
masterTime = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///mechanics
masterTime++;

if (!startTimeSet &amp;&amp; redOnline &amp;&amp; blueOnline) {
    startTime = masterTime;
    startTimeSet = true;
}

if (currentPowerup.type != 255) {
    currentPowerupTime++;
} else {
    currentPowerupTime = 0;
}

if (currentPowerupTime &lt; 10) {
    if (currentPowerup.side == "r") {
        redPowerupPower[currentPowerup.type] = 0;
    } else if (currentPowerup.side == "b") {
        bluePowerupPower[currentPowerup.type] = 0;
    }
}

if (currentPowerupTime &gt; maxPowerupTime) {
    currentPowerup.type = inQueuePowerup.type;
    currentPowerup.side = inQueuePowerup.side;
    currentPowerup.powerLevel = inQueuePowerup.powerLevel;
    inQueuePowerup.type = 255;
    inQueuePowerup.side = "none";
    inQueuePowerup.powerLevel = 0;
    currentPowerupTime = 0;
}

var affected;
var endd; //misspelled because end is a keyword

for (var i = 0; i &lt; 3; i++) {
    affected[i] = false;
}

if (currentPowerup.side == "r") {
    endd = 0;
} else {
    endd = 2;
}

if (currentPowerup.powerLevel == 1 || currentPowerup.powerLevel == 3) {
    affected[endd] = true;
}

if (currentPowerup.powerLevel == 2 || currentPowerup.powerLevel == 3) {
    affected[1] = true;
}

for (var i = 0; i &lt; 3; i++) {
    if (affected[i]) {
        powerupEffects[i].type = currentPowerup.type;
        powerupEffects[i].side = currentPowerup.side;
    } else {
        powerupEffects[i].type = 255;
        powerupEffects[i].side = "none";
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///send data
//field
for (var i = 0; i &lt; ds_list_size(ipList); i++) {
    bufferToSend = buffer_create(256, buffer_fixed, 1);
    buffer_seek(bufferToSend, buffer_seek_start, 0);
    buffer_write(bufferToSend, buffer_string, "f");
    buffer_write(bufferToSend, buffer_u8, rando);
    var timeToSend;
    
    if (startTime == -1) {
        timeToSend = 0;
    } else {
        timeToSend = masterTime - startTime;
    }
    
    buffer_write(bufferToSend, buffer_u32, timeToSend);
    network_send_udp(serverSocket, ds_list_find_value(ipList, i), ds_list_find_value(portList, i), bufferToSend, buffer_tell(bufferToSend));
    buffer_delete(bufferToSend);
}

//robot
for (var i = 0; i &lt; ds_list_size(ipList); i++) {
    bufferToSend = buffer_create(256, buffer_fixed, 1);
    buffer_seek(bufferToSend, buffer_seek_start, 0);
    buffer_write(bufferToSend, buffer_string, "r");
    
    for (var j = 0; j &lt; numRobots; j++) {
        buffer_write(bufferToSend, buffer_f32, xPoses[j]);
        buffer_write(bufferToSend, buffer_f32, yPoses[j]);
        buffer_write(bufferToSend, buffer_f32, imageAngles[j]);
        buffer_write(bufferToSend, buffer_u32, spriteIndexes[j]);
    }
    
    network_send_udp(serverSocket, ds_list_find_value(ipList, i), ds_list_find_value(portList, i), bufferToSend, buffer_tell(bufferToSend));
    buffer_delete(bufferToSend);
}

//pick up
for (var i = 0; i &lt; ds_list_size(ipList); i++) {
    for (var j = 0; j &lt; numCubes; j++) {
        if (pickUpPositions[j] != -1) {
            bufferToSend = buffer_create(256, buffer_fixed, 1);
            buffer_seek(bufferToSend, buffer_seek_start, 0);
            buffer_write(bufferToSend, buffer_string, "pu");
            buffer_write(bufferToSend, buffer_u8, pickUpPositions[j]);
            buffer_write(bufferToSend, buffer_u32, j);
            network_send_udp(serverSocket, ds_list_find_value(ipList, i), ds_list_find_value(portList, i), bufferToSend, buffer_tell(bufferToSend));
            buffer_delete(bufferToSend);
        }
    }
}

//powerup
for (var i = 0; i &lt; ds_list_size(ipList); i++) {
    bufferToSend = buffer_create(256, buffer_fixed, 1);
    buffer_seek(bufferToSend, buffer_seek_start, 0);
    buffer_write(bufferToSend, buffer_string, "pw");
    
    for (var j = 0; j &lt; 3; j++) {
        buffer_write(bufferToSend, buffer_u8, powerupEffects[j].type);
        buffer_write(bufferToSend, buffer_string, powerupEffects[j].side);
    }
    
    network_send_udp(serverSocket, ds_list_find_value(ipList, i), ds_list_find_value(portList, i), bufferToSend, buffer_tell(bufferToSend));
    buffer_delete(bufferToSend);
}

//cubes
for (var i = 0; i &lt; ds_list_size(ipList); i++) {
    var numChanged = 0;
    
    for (var j = 0; j &lt; numCubes; j++) {
        if (changedCubes[j] != noone) {
            numChanged++;
        }
    }

    bufferToSend = buffer_create(2560, buffer_fixed, 1);
    buffer_seek(bufferToSend, buffer_seek_start, 0);
    buffer_write(bufferToSend, buffer_string, "cb");
    buffer_write(bufferToSend, buffer_u32, numChanged);

    for (var j = 0; j &lt; numCubes; j++) {
        var dataId = changedCubes[j];
        
        if (dataId != noone) {
            buffer_write(bufferToSend, buffer_u32, j);
            buffer_write(bufferToSend, buffer_s32, dataId.xPos);
            buffer_write(bufferToSend, buffer_s32, dataId.yPos);
            buffer_write(bufferToSend, buffer_s32, dataId.imageAngle);
        }
    }
    
    network_send_udp(serverSocket, ds_list_find_value(ipList, i), ds_list_find_value(portList, i), bufferToSend, buffer_tell(bufferToSend));
    buffer_delete(bufferToSend);
}


//powerup power for ui
for (var i = 0; i &lt; ds_list_size(ipList); i++) {
    bufferToSend = buffer_create(256, buffer_fixed, 1);
    buffer_seek(bufferToSend, buffer_seek_start, 0);
    buffer_write(bufferToSend, buffer_string, "ac");
    
    for (var j = 0; j &lt; 3; j++) {
        buffer_write(bufferToSend, buffer_u8, redPowerupPower[j]);
        buffer_write(bufferToSend, buffer_u8, bluePowerupPower[j]);
    }
    
    network_send_udp(serverSocket, ds_list_find_value(ipList, i), ds_list_find_value(portList, i), bufferToSend, buffer_tell(bufferToSend));
    buffer_delete(bufferToSend);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///receiving data from a client
ip = string(ds_map_find_value(async_load, "ip"));
port = ds_map_find_value(async_load, "port");
receivedBuffer = ds_map_find_value(async_load, "buffer");
buffer_seek(receivedBuffer, buffer_seek_start, 0);
var type = buffer_read(receivedBuffer, buffer_string);

if (type == "c") { //connection
    if (ds_list_find_index(ipList, ip) == -1) {
        ds_list_add(ipList, ip);
        ds_list_add(portList, port);
        show_debug_message("client connected");
    }
    
    bufferToSend = buffer_create(256, buffer_fixed, 1);
    buffer_seek(bufferToSend, buffer_seek_start, 0);
    buffer_write(bufferToSend, buffer_string, "c"); //connection confirm
    network_send_udp(serverSocket, ip, port, bufferToSend, buffer_tell(bufferToSend));
    buffer_delete(bufferToSend);
} else if (type == "r") { //robot
    var position = buffer_read(receivedBuffer, buffer_u8);
    var xPos = buffer_read(receivedBuffer, buffer_f32);
    var yPos = buffer_read(receivedBuffer, buffer_f32);
    var imageAngle = buffer_read(receivedBuffer, buffer_f32);
    var spriteIndex = buffer_read(receivedBuffer, buffer_u32);
    xPoses[position] = xPos;
    yPoses[position] = yPos;
    imageAngles[position] = imageAngle;
    spriteIndexes[position] = spriteIndex;
    
    if (position &gt;= 0 &amp;&amp; position &lt; 3) {
        redOnline = true;
    } else {
        blueOnline = true;
    }
} else if (type == "pu") { //pick up
    var position = buffer_read(receivedBuffer, buffer_u8);
    var cubeNum = buffer_read(receivedBuffer, buffer_u32);
    
    if (pickUpPositions[cubeNum] == -1) {
        pickUpPositions[cubeNum] = position;
        var dataId;
        
        if (changedCubes[cubeNum] == noone) {
            dataId = instance_create(0, 0, objData);
        } else {
            dataId = changedCubes[cubeNum];
        }
        
        dataId.xPos = -50;
        dataId.yPos = -50;
        dataId.imageAngle = 0;
        changedCubes[cubeNum] = dataId;
    }
} else if (type == "pd") { //put down
    var cubeNum = buffer_read(receivedBuffer, buffer_u32);
    var dataId;
    
    if (changedCubes[cubeNum] == noone) {
        dataId = instance_create(0, 0, objData);
    } else {
        dataId = changedCubes[cubeNum];
    }
    
    dataId.xPos = buffer_read(receivedBuffer, buffer_u32);
    dataId.yPos = buffer_read(receivedBuffer, buffer_u32);
    dataId.imageAngle = buffer_read(receivedBuffer, buffer_u32);
    pickUpPositions[cubeNum] = -1;
    changedCubes[cubeNum] = dataId;
} else if (type == "pw") { //powerup
    var type = buffer_read(receivedBuffer, buffer_u8);
    var side = buffer_read(receivedBuffer, buffer_string);
    var powerLevel;
    
    if (side == "r") {
        powerLevel = redPowerupPower[type];
    } else if (side == "b") {
        powerLevel = bluePowerupPower[type];
    }
    
    if (type != 255 &amp;&amp; powerLevel &gt; 0) {
        if (currentPowerup.type == 255) {
            currentPowerup.type = type;
            currentPowerup.side = side;
            currentPowerup.powerLevel = powerLevel;
        } else if (currentPowerup.side != side &amp;&amp; inQueuePowerup.type == 255) {
            inQueuePowerup.type = type;
            inQueuePowerup.side = side;
            inQueuePowerup.powerLevel = powerLevel;
        }
    }
    
} else if (type == "cb") { //cube
    var num = buffer_read(receivedBuffer, buffer_u32);
    
    for (var i = 0; i &lt; num; i++) {
        var cubeNum = buffer_read(bufferToSend, buffer_u32);
        var xPos = buffer_read(bufferToSend, buffer_f32);
        var yPos = buffer_read(bufferToSend, buffer_f32);
        var imageAngle = buffer_read(bufferToSend, buffer_f32);
        
        if (changedCubes[cubeNum] == noone) {
            var dataId = instance_create(0, 0, objData);
            dataId.xPos = xPos;
            dataId.yPos = yPos;
            dataId.imageAngle = imageAngle;
            changedCubes[cubeNum] = dataId;
        }
    }
} else if (type == "ac") { //added cube
    var redType = buffer_read(receivedBuffer, buffer_u8);
    var redNum = buffer_read(receivedBuffer, buffer_u32); //cube number
    var blueType = buffer_read(receivedBuffer, buffer_u8);
    var blueNum = buffer_read(receivedBuffer, buffer_u32);
    
    if (redType != 255 &amp;&amp; redNum != noone &amp;&amp; ds_list_find_index(invalidNums, redNum) == -1) { //cuz it's unsigned integer
        redPowerupPower[redType]++;
        ds_list_add(invalidNums, redNum);
        var dataId = instance_create(0, 0, objData);
        dataId.xPos = -50;
        dataId.yPos = -50;
        dataId.imageAngle = 0;
        changedCubes[redNum] = dataId;
    }
    
    if (blueType != 255 &amp;&amp; blueNum != noone &amp;&amp; ds_list_find_index(invalidNums, blueNum) == -1) {
        bluePowerupPower[blueType]++;
        ds_list_add(invalidNums, blueNum);
        var dataId = instance_create(0, 0, objData);
        dataId.xPos = -50;
        dataId.yPos = -50;
        dataId.imageAngle = 0;
        changedCubes[blueNum] = dataId;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
